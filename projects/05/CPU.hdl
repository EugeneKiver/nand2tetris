// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Instruction type
    Not(in=instruction[15], out=ni);
	
	// ** save A register
	Not(in=instruction[5], out=n-dest-a);
	
	// Instruction 15 is selector here
	Mux(a=ni, b=n-dest-a, sel=instruction[15], out=mux-a-sel);
	Mux16(a=alu, b=instruction, sel=mux-a-sel, out=mux-a);
	
	Mux(a=ni, b=instruction[5], sel=instruction[15], out=areg-load);
	ARegister(in=mux-a, load=areg-load, out=areg, out[0..14]=addressM);
	
	// ** Mux A and M, note that we're not checking for instr. type
	// 12 is a/m selector
	Mux16(a=areg, b=inM, sel=instruction[12], out=mux-am);
	
	// ** D Register
	And(a=instruction[4], b=instruction[15], out=dreg-load);
	DRegister(in=alu, load=dreg-load, out=dreg);
	
	// ** ALU
	ALU(x=dreg, y=mux-am, 
		zx=instruction[11],nx=instruction[10],
		zy=instruction[9], ny=instruction[8],
		 f=instruction[7], no=instruction[6], 
		 out=alu, out=outM, zr=alu-zr, ng=alu-ng);
	
	// ** Write memory, only if C-instruction and bit 3 is 1 
	And(a=instruction[3], b=instruction[15], out=writeM);

	// Progamm counter
	And(a=alu-zr, b=instruction[1], out=jeq);    // is zero and jump if zero
    And(a=alu-ng, b=instruction[2], out=jlt);    // is neg and jump if neg
    Or(a=alu-zr, b=alu-ng, out=zr-or-ng);		// zero or negative
    Not(in=zr-or-ng, out=pos);            		// is positive (not zero and not neg)
    And(a=pos, b=instruction[0], out=jgt); // is pos and jump if pos
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jump);              // load PC if cond met and jump if cond
    And(a=instruction[15], b=jump, out=pc-load); // Only jump if C instruction
    Not(in=pc-load, out=pc-inc);                  // only inc if not load
	PC(in=areg, inc=pc-inc, load=pc-load, reset=reset, out[0..14]=pc);

}